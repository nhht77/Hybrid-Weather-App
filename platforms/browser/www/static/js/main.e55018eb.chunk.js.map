{"version":3,"sources":["actions/weatherAction.js","component/AutoComplete.js","App.js","serviceWorker.js","index.js"],"names":["getWeather","city","Promise","resolve","reject","axios","get","concat","then","res","data","catch","err","console","log","cityList","require","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","name","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","className","country","AutoComplete","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_ref","newValue","setState","onSubmit","e","preventDefault","state","current","props","addFavorite","onSuggestionsFetchRequested","_ref2","suggestions","onSuggestionsClearRequested","_this$state","inputProps","placeholder","dist_default","Component","App","fav","newState","objectSpread","favorite","toConsumableArray","weather","src_component_AutoComplete","map","idx","key","main","temp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e55018eb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getWeather = (city) => {\r\n    return new Promise((resolve, reject) => \r\n    {\r\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=c9ca3fdada77609e76fec6e849b11dd1`)\r\n    .then( (res) => { \r\n\r\n        // console.log(res.data);\r\n        // this.setState({temperature:res.data.main.temp});\r\n        resolve(res.data);\r\n    })\r\n    .catch( (err) => { \r\n        console.log(err);\r\n        reject(err);\r\n    })\r\n\r\n    })\r\n} ","import React, { Component } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport {getWeather} from '../actions/weatherAction';\r\nimport './AutoComplete.css';\r\n\r\nconst cityList = require('../cityList/current.city.list.json'); \r\n\r\nconst getSuggestions = value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0 ? [] : cityList.filter(city =>\r\n    city.name.toLowerCase().slice(0, inputLength) === inputValue\r\n  ).slice(0, 6);\r\n};\r\n\r\nconst getSuggestionValue = suggestion => suggestion.name;\r\n\r\nconst renderSuggestion = suggestion => (\r\n  <div className=\"suggestion\">\r\n    {suggestion.name}, {suggestion.country}\r\n  </div>\r\n);\r\n\r\nclass AutoComplete extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n      e.preventDefault();\r\n      let value = this.state.value;\r\n\r\n    //   console.log(value);\r\n      getWeather(value).then(current => {\r\n          console.log(current);\r\n          this.props.addFavorite(current)\r\n        });\r\n      \r\n  }\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    // Autosuggest will pass through all these props to the input.\r\n    const inputProps = {\r\n      placeholder: 'Type a city',\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n\r\n    // Finally, render it!\r\n    return (\r\n    <form onSubmit={this.onSubmit}>\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n        \r\n      />\r\n        <button className=\"search-btn\"><i className=\"fas fa-sun\"></i></button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AutoComplete;\r\n","import React, { Component } from 'react';\nimport AutoComplete from \"./component/AutoComplete\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      weather: [],\n      favorite: []\n    }\n  }\n  \n\n  addFavorite = fav => {\n    const newState = {...this.state};\n    newState.favorite = [...newState.favorite, fav];\n    this.setState(newState);\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>Weather App</h1>\n        </header>\n\n        <AutoComplete\n          addFavorite={this.addFavorite}\n        />\n\n        <div className=\"container\">\n          {\n            this.state.favorite.map( (fav, idx) => (\n            <div className=\"fav\" key={idx}>  \n              <div className=\"fav-name\">{fav.name}</div>\n              <div className=\"fav-temp\">{fav.main.temp} 'C</div>\n            </div>\n          ))}\n        </div>\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}